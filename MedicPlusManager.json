{
    "language": "Solidity",
    "sources": {
        "MedicPlusManager.sol": {
            "content": "// SPDX-License-Identifier: Open software License 3.0(OSL-3.0)\r\npragma solidity ^0.8.24; \r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\ncontract MedicPlusManager is Ownable, AccessControl {\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    uint256 public nextCaseId;\r\n\r\n    struct CaseFolder{\r\n        uint256 caseId;\r\n        uint256 issueDate;//Indica la fecha de alta\r\n        string [] cids;// Identificadores único del archivo en IPFS\r\n        string name;\r\n        string description;\r\n        address patient;\r\n        bool exists;\r\n    }\r\n\r\n    struct FullPermission {\r\n        bool fullAccess; // Acceso total a todos los documentos\r\n        bool temporaryAccess; // Acceso temporal\r\n        uint256 expiration; // Fecha de expiración del permiso temporal (en timestamp)\r\n    }\r\n\r\n    struct SpecificPermission {\r\n        // uint256 caseId; // ID del caso específico\r\n        bool hasAccess; // Indica si el permiso específico está otorgado\r\n        uint256 expiration; // Fecha de expiración del permiso específico (en timestamp). Si no la tiene, debe ser 0\r\n    }\r\n\r\n    mapping(uint256 => CaseFolder) public cases;//IDs => Carpeta de caso\r\n    mapping(address => CaseFolder []) public userCases;//Paciente => Lista [] de Carpetas de caso\r\n    mapping(address => mapping(address => mapping(uint256 => SpecificPermission))) private specificPermissions;//Doctor => (Paciente => (Caso => Permiso Especifico))\r\n    mapping(address => mapping(address => FullPermission)) private fullPermissions;//Doctor => (Paciente => Permiso General)\r\n\r\n    event CaseUploaded(uint256 caseId, string cid, string name, address patient, uint256 issueDate);\r\n    event FullPermissionGranted(address patient, address recipient);\r\n    event CasePermissionGranted(address patient, address recipient, uint256 caseId);\r\n    event FullPermissionRevoqued(address patient, address recipient);\r\n    event CasePermissionRevoqued(address patient, address recipient, uint256 caseId);\r\n    event CaseEdited(uint256 caseId, uint256 editDate);\r\n\r\n    error NoFullPermission();\r\n    error NoValidAddress();\r\n    constructor() Ownable(msg.sender){\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Sube un nuevo documento al sistema.\r\n    * @param _cid CID del documento en IPFS.\r\n    * @param _description Descripción del documento.\r\n    * @param _patient Dirección del propietario del documento.\r\n    * @param _issueDate Fecha de alta del documento.\r\n    * @notice La función asigna un ID único al documento y lo asocia al propietario. Además, emite un evento indicando que el documento ha sido subido.\r\n    */\r\n    function uploadCase(string calldata _cid, string calldata _name, string calldata _description, address _patient, uint256 _issueDate) external {\r\n    // function uploadCase(string calldata _cid, string calldata _name, string calldata _description, address _patient, string memory _issueDate) external {\r\n        require(_patient != address(0), \"Invalid patient address\");\r\n        require(bytes(_cid).length > 0, \"Invalid CID\");\r\n        require(bytes(_name).length > 0, \"Invalid name\");\r\n        require(bytes(_description).length > 0, \"Invalid description\");\r\n\r\n        string [] storage caseCids = cases[nextCaseId].cids;\r\n        caseCids.push(_cid);\r\n\r\n        nextCaseId++;\r\n        cases[nextCaseId] = CaseFolder({\r\n            caseId: nextCaseId,\r\n            issueDate: _issueDate,\r\n            // cid: _cid,\r\n            cids: caseCids,\r\n            name: _name,\r\n            description: _description,\r\n            patient: _patient,\r\n            exists: true\r\n            });\r\n\r\n        userCases[_patient].push(cases[nextCaseId]);\r\n        // userCasesIds[_patient].push(caseId);\r\n        emit CaseUploaded(nextCaseId, _cid, _name, _patient, _issueDate);\r\n    }\r\n     /**\r\n     * @notice Edits an existing case with updated CID, name, or description.\r\n     * @dev Only allows editing if the case exists. Updates related lists for the patient after modifications.\r\n     * @param _caseId The ID of the case to be edited.\r\n     * @param _cid The new CID to append to the case's list of CIDs. If empty, it won't be updated.\r\n     * @param _name The new name for the case. If empty, it won't be updated.\r\n     * @param _description The new description for the case. If empty, it won't be updated.\r\n     * @custom:reverts \"Case does not exist\" if the provided case ID does not correspond to an existing case.\r\n     * @custom:emits CaseEdited when the case is successfully updated.\r\n     */   \r\n\r\n     /**\r\n     * @notice Edita un caso existente con un CID, nombre o descripción actualizados.\r\n     * @dev Solo permite editar si el caso existe. Actualiza las listas relacionadas para el paciente después de las modificaciones.\r\n     * @param _caseId El ID del caso que se va a editar.\r\n     * @param _cid El nuevo CID que se debe agregar a la lista de CIDs del caso. Si está vacío, no se actualizará.\r\n     * @param _name El nuevo nombre para el caso. Si está vacío, no se actualizará.\r\n     * @param _description La nueva descripción para el caso. Si está vacío, no se actualizará.\r\n     * @notice emits CaseEdited cuando el caso se actualiza exitosamente.\r\n     * @custom:reverts \"El caso no existe\" si el ID de caso proporcionado no corresponde a un caso existente.\r\n     */ \r\n     function editCase(uint256 _caseId, string calldata _cid, string calldata _name, string calldata _description) external {\r\n        CaseFolder storage userCase = cases[_caseId];\r\n        require(userCase.exists, \"Case does not exist\");\r\n        uint256 editDate = block.timestamp;\r\n        //QUIEN puede editar un caso? Rol?\r\n        // require(userCase.patient == msg.sender, \"Unauthorized\");\r\n\r\n        if(bytes(_cid).length > 0){\r\n            // string [] storage caseCids = cases[_caseId].cids;\r\n            userCase.cids.push(_cid);\r\n        }\r\n        if(bytes(_name).length > 0){\r\n            userCase.name = _name;\r\n        }\r\n        if(bytes(_description).length > 0){\r\n            userCase.description = _description;\r\n        }\r\n        \r\n        userCase.issueDate = editDate;\r\n           // Reemplazar el caso actualizado en la lista del paciente\r\n\r\n        address patient = userCase.patient;\r\n        for (uint256 i = 0; i < userCases[patient].length; i++) {\r\n            if (userCases[patient][i].caseId == _caseId) {\r\n                userCases[patient][i] = userCase;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // userCasesIds[_patient].push(caseId);\r\n        emit CaseEdited(_caseId, editDate);\r\n    }\r\n\r\n    /** \r\n    * @dev Concede acceso completo a todos los documentos del remitente a una dirección específica.\r\n    * @param _recipient Dirección que recibe los permisos.\r\n    * @param _expiration Fecha de expiración del permiso (en timestamp).\r\n    * @notice Si se especifica una expiración, el permiso se considera temporal y se revocará automáticamente después de la fecha indicada.\r\n    * @notice Si no se desea especificar una expiración, _expiration debe ser 0\r\n    */\r\n    function grantFullPermission(address _recipient, uint256 _expiration) external {\r\n        // require(_recipient != address(0), \"Invalid recipient address\");\r\n        if(_recipient == address(0)){\r\n            revert NoValidAddress();\r\n        }\r\n        fullPermissions[_recipient][msg.sender].fullAccess = true;\r\n\r\n        if(_expiration > 0){\r\n            require(_expiration > block.timestamp, \"Expiration must be in the future\");\r\n            fullPermissions[_recipient][msg.sender].temporaryAccess = true;\r\n            fullPermissions[_recipient][msg.sender].expiration = _expiration;\r\n        }\r\n        emit FullPermissionGranted(msg.sender,_recipient);\r\n        \r\n    } \r\n    \r\n    /**\r\n    * @dev Concede permisos de acceso a documentos específicos a una dirección.\r\n    * @param _recipient Dirección que recibe los permisos de acceso.\r\n    * @param _caseId ID del caso al que se concede acceso.\r\n    * @param _expiration Fecha de expiración del permiso (en timestamp).\r\n    * @notice Si se especifica una expiración, el permiso para cada documento será temporal y se revocará automáticamente después de la fecha indicada.\r\n    * @notice Si no se desea una fecha de una expiración, _expiration debe ser 0.\r\n    */\r\n    function grantCasePermission(address _recipient, uint256 _caseId, uint256 _expiration) external {\r\n        require(_caseId > 0, \"Invalid caseId. Must be greater than 0\");\r\n        require(_recipient != address(0), \"Invalid recipient address\");\r\n\r\n        specificPermissions[_recipient][msg.sender][_caseId].hasAccess = true;\r\n        if(_expiration > 0){\r\n            require(_expiration > block.timestamp, \"Expiration must be in the future\");\r\n            specificPermissions[_recipient][msg.sender][_caseId].expiration = _expiration;\r\n        }\r\n        emit CasePermissionGranted(msg.sender,_recipient,_caseId);\r\n    }\r\n\r\n    /**\r\n    * @dev Revoca el acceso completo de una dirección a todos los documentos del remitente.\r\n    * @param _recipient Dirección cuyo permiso será revocado.\r\n    * @notice Emite un evento indicando que el permiso completo ha sido revocado.\r\n    */\r\n    function revokeFullPermission(address _recipient) external {\r\n        require(_recipient != address(0), \"Invalid recipient address\");\r\n        require(fullPermissions[_recipient][msg.sender].fullAccess, \"Recipient does not have full access\");\r\n        \r\n        delete fullPermissions[_recipient][msg.sender].fullAccess;\r\n        delete fullPermissions[_recipient][msg.sender].temporaryAccess;\r\n        delete fullPermissions[_recipient][msg.sender].expiration;\r\n        // if(permissions[msg.sender][_recipient].temporaryAccess){\r\n        //     delete permissions[msg.sender][_recipient].temporaryAccess;\r\n        //     delete permissions[msg.sender][_recipient].expiration;\r\n        // }\r\n        emit FullPermissionRevoqued(msg.sender,_recipient);\r\n    }\r\n    /**\r\n    * @dev Revoca el acceso a documentos específicos de una dirección.\r\n    * @param _recipient Dirección cuyo permiso será revocado.\r\n    * @param _caseId ID del caso cuyo permiso serán revocado.\r\n    * @notice Emite un evento indicando que el permiso del caso ha sido revocado.\r\n    */  \r\n    function revokeCasePermission(address _recipient, uint256 _caseId) external {\r\n        require(_caseId > 0, \"Invalid caseId. Must be greater than 0\");\r\n        require(_recipient != address(0), \"Invalid recipient address\");\r\n        require(specificPermissions[_recipient][msg.sender][_caseId].hasAccess, \"Recipient does not have permission\");\r\n\r\n        delete specificPermissions[_recipient][msg.sender][_caseId];\r\n        emit CasePermissionRevoqued(msg.sender,_recipient,_caseId);    \r\n    }\r\n    /**\r\n    * @dev Verificar si un destinatario tiene acceso a un documento.\r\n    * @param _patient Dirección del propietario del documento.\r\n    * @param _recipient Dirección del destinatario que solicita acceso.\r\n    * @param _caseId Identificador único del caso.\r\n    * @return bool `true` si el destinatario tiene acceso al documento, de lo contrario `false`.\r\n    */\r\n    function hasAccess(address _patient,address _recipient, uint256 _caseId) external view returns (bool) {\r\n        FullPermission memory fullPermission = fullPermissions[_recipient][_patient];\r\n        if(_caseId == 0){\r\n            return fullPermission.fullAccess || fullPermission.temporaryAccess;\r\n        }\r\n        SpecificPermission memory specificPermission = specificPermissions[_recipient][_patient][_caseId];\r\n        return(specificPermission.hasAccess || specificPermission.expiration > block.timestamp);\r\n    }  \r\n    \r\n    /**\r\n    * @dev Obtener todos los casos completos de un usuario.\r\n    * @param _patient Dirección del usuario cuyos documentos se solicitarán.\r\n    * @return Document[] Array de casos completos del usuario.\r\n    */\r\n    function getAllCases(address _patient) external view returns (CaseFolder[] memory) {\r\n        return userCases[_patient];\r\n    }\r\n\r\n    /**\r\n    * @dev Obtener los detalles completos de un caso especifico.\r\n    * @param _caseId Identificador único del caso.\r\n    * @return Document Información detallada del caso solicitado.\r\n    */\r\n    function getCase(uint256 _caseId) external view returns (CaseFolder memory) {\r\n        require(cases[_caseId].exists, \"Document does not exist\");\r\n        return cases[_caseId];\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if a full permission is active for a recipient to access a patient's case or general records.\r\n     * @dev Validates both full and case-specific permissions, including expiration times.\r\n     * @param _recipient The address of the entity attempting to access the data.\r\n     * @param _patient The address of the patient whose data is being accessed.\r\n     * @param _caseId The ID of the case being accessed. If 0, checks general full permissions.\r\n     * @return A boolean indicating whether the permission is active and valid.\r\n     * @custom:reverts NoFullPermission if a general full permission exists but has expired.\r\n     * @custom:reverts \"Patient does not have permission\" if case-specific permissions are expired or invalid.\r\n     */\r\n    /**\r\n    * @notice Verifica si una autorización completa está activa para un destinatario para acceder a un caso de un paciente o registros generales.\r\n    * @dev Valida las autorizaciones completas y específicas de caso, incluyendo los tiempos de expiración.\r\n    * @param _recipient La dirección de la entidad que intenta acceder a los datos.\r\n    * @param _patient La dirección del paciente cuyos datos se están accediendo.\r\n    * @param _caseId El ID del caso que se está accediendo. Si es 0, se verifican autorizaciones completas generales.\r\n    * @return Un booleano que indica si la autorización está activa y es válida.\r\n    * @custom:reverts NoFullPermission si existe una autorización completa general pero ha expirado.\r\n    */\r\n    function isFullPermissionActive(address _recipient,address _patient, uint256 _caseId) external view returns (bool) {\r\n        \r\n    if(_caseId == 0){\r\n        if(fullPermissions[_recipient][_patient].expiration != 0 &&\r\n        fullPermissions[_recipient][_patient].expiration < block.timestamp){\r\n            revert NoFullPermission();\r\n        }\r\n        \r\n        // require (fullPermissions[_recipient][_patient].expiration == 0 || fullPermissions[_recipient][_patient].expiration > block.timestamp, \"Patient does not have full access\");\r\n        return fullPermissions[_recipient][_patient].fullAccess;\r\n    }else{\r\n        require(specificPermissions[_recipient][_patient][_caseId].expiration == 0 || specificPermissions[_recipient][_patient][_caseId].expiration > block.timestamp, \"Patient does not have permission\");        \r\n        return specificPermissions[_recipient][_patient][_caseId].hasAccess;\r\n    }\r\n    }\r\n\r\n     /**\r\n     * @notice Checks if a temporary permission is active for a recipient to access a patient's data.\r\n     * @dev Differentiates between general temporary permissions and case-specific permissions.\r\n     * @param _recipient The address of the entity attempting to access the data.\r\n     * @param _patient The address of the patient whose data is being accessed.\r\n     * @param _caseId The ID of the case being accessed. If 0, checks general temporary permissions.\r\n     * @return A boolean indicating whether the temporary permission is active.\r\n     */\r\n\r\n     /**\r\n     * @notice Verifica si una autorización temporal está activa para un destinatario para acceder a los datos de un paciente.\r\n     * @dev Diferencia entre autorizaciones temporales generales y específicas de caso.\r\n     * @param _recipient La dirección de la entidad que intenta acceder a los datos.\r\n     * @param _patient La dirección del paciente cuyos datos se están accediendo.\r\n     * @param _caseId El ID del caso que se está accediendo. Si es 0, se verifican autorizaciones temporales generales.\r\n     * @return Un booleano que indica si la autorización temporal está activa.\r\n     */\r\n    function isTemporaryPermissionActive(address _recipient,address _patient, uint256 _caseId) external view returns (bool) {\r\n        if(_caseId == 0){\r\n            return fullPermissions[_recipient][_patient].temporaryAccess;\r\n        }else{\r\n            return specificPermissions[_recipient][_patient][_caseId].expiration > block.timestamp;\r\n        }\r\n    }\r\n    // function getSpecificPermissions(address patient) external view returns (SpecificPermission[] memory) {\r\n    //     return specificPermissions[patient][msg.sender];\r\n    // }\r\n}\r\n"
        },
        "@openzeppelin/contracts/access/AccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/IAccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "": [
                    "ast"
                ],
                "*": [
                    "abi",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.legacyAssembly",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "evm.gasEstimates",
                    "evm.assembly"
                ]
            }
        },
        "remappings": [],
        "evmVersion": "paris"
    }
}